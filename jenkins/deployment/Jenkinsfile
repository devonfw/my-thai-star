pipeline{
    agent any

    options {
        buildDiscarder(logRotator(artifactDaysToKeepStr: '1', artifactNumToKeepStr: '1', daysToKeepStr: '5', numToKeepStr: '50'))
        // Disable concurrent builds. It will wait until the pipeline finish before start a new one
        disableConcurrentBuilds()
    }

    environment {
        // Java Deploy Pipeline name
        javaDeployPipeline = 'MyThaiStar_SERVER_DEPLOY'
        // Angular Deploy Pipeline name
        angularDeployPipeline = 'MyThaiStar_FRONTEND_DEPLOY'
    }

    parameters {
        credentials(name: 'sshAgentCredentials', defaultValue: 'CHANGE-ME', description: 'ssh credentials', credentialType: 'com.cloudbees.jenkins.plugins.sshcredentials.impl.BasicSSHUserPrivateKey') 
        string(name: 'nexusApiUrl', defaultValue: "http://nexus3-core:8081/nexus3", description: 'nexus url')
        credentials(name: 'nexusCredentialsId', defaultValue: "nexus-technical-api", description: 'nexus credentials', credentialType: 'com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl')
        string(name: 'repository', defaultValue: 'maven-snapshots', description: 'maven repository')

        string(name: 'JAVA_VERSION', defaultValue: '3.2.0-SNAPSHOT', description: 'Java Version number') 
        string(name: 'ANGULAR_VERSION', defaultValue: '3.2.0-SNAPSHOT', description: 'Angular Version number') 
        string(name: 'EXTERNAL_SERVER_IP', defaultValue: 'CHANGE-ME', description: 'Server IP') 
        string(name: 'APPLICATION_DIR', defaultValue: '/root/mythaistar/reverse-proxy/', description: 'My Thai Star application directory')

    }


    stages {
        stage ('Copy files to remote server') {
            steps {
                sshagent (credentials: [sshAgentCredentials]) {
                    sh """
                        ssh -o StrictHostKeyChecking=no root@${params.EXTERNAL_SERVER_IP} mkdir -p ${params.APPLICATION_DIR}
                        scp -o StrictHostKeyChecking=no -r reverse-proxy/* root@${params.EXTERNAL_SERVER_IP}:${params.APPLICATION_DIR}
                    """
                }
            }
        }

        stage ('Deploy java application') {
            steps {
                build job: javaDeployPipeline, parameters: [
                    credentials(name: 'sshAgentCredentials',value: sshAgentCredentials),
                    string(name: 'nexusApiUrl',value: nexusApiUrl),
                    credentials(name: 'nexusCredentialsId',value: nexusCredentialsId),
                    string(name: 'repository',value: repository),
                    string(name: 'VERSION', value: params.JAVA_VERSION),
                    string(name: 'EXTERNAL_SERVER_IP', value: params.EXTERNAL_SERVER_IP),
                    string(name: 'APPLICATION_DIR', value: params.APPLICATION_DIR)
                ]
            }
        }
        
        stage ('Deploy angular application') {
            steps {
                build job: angularDeployPipeline, parameters: [
                    credentials(name: 'sshAgentCredentials',value: sshAgentCredentials),
                    string(name: 'nexusApiUrl',value: nexusApiUrl),
                    credentials(name: 'nexusCredentialsId',value: nexusCredentialsId),
                    string(name: 'repository',value: repository),
                    string(name: 'VERSION', value: params.ANGULAR_VERSION),
                    string(name: 'EXTERNAL_SERVER_IP', value: params.EXTERNAL_SERVER_IP),
                    string(name: 'APPLICATION_DIR', value: params.APPLICATION_DIR)
                ]
            }
        }
    }
}