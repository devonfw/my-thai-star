:toc: macro
toc::[]

= Node.js design (deprecated)

== Introduction

The Node.js backend for My Thai Star application is going to be based on:

 - *Express.js* as the web application framework
 - *OASP4Fn* as data access layer framework
 - *DynamoDB* as NoSQL Database

To know more details about the above technologies please visit the following documentation:

 - https://expressjs.com[Express.js]
 - https://github.com/oasp/oasp4fn/wiki[OASP4Fn]
 - https://aws.amazon.com/dynamodb/developer-resources/[DynamoDB]

== Basic architecture details

This structure can be shown in the following example image:

image::images/nodejs/folder_organization.png[, link="images/nodejs/folder_organization.png"]

* public - All files which be exposed on the server directly
* src
** database folder - Folder with scripts to create/delete/seed the database
** model - Folder with all data model
** routes - Folder with all Express.js routers
** utils - Folder with all utils like classes and functions
** _app.ts_ - File with Express.js declaration
** _config.ts_ - File with server configs
** _logic.ts_ - File with the business logic
* test - Folder with all tests

== Layers

- Service Layer: this layer will expose the REST api to exchange information with the client applications.
- Logic Layer: the layer in charge of hosting the business logic of the application.
- Data Access Layer: the layer to communicate with the data base.

=== Service layer

The services layer will be solved using REST services with https://expressjs.com[Express.js] 

To give service to the defined _User Stories_ we will need to implement the following services:

- provide all available dishes.

- save a booking.

- save an order.

- provide a list of bookings (only for waiters) and allow filtering.

- provide a list of orders (only for waiters) and allow filtering.

- login service (see the _Security_ section).

- provide the _current user_ data (see the _Security_ section)


In order to be compatible with the other backend implementations, we must follow the https://github.com/devonfw/devon4j/wiki/guide-rest[naming conventions] proposed for _Devon4j_ applications. We will define the following _end points_ for the listed services.

- (POST) `/mythaistar/services/rest/dishmanagement/v1/dish/search`.

- (POST) `/mythaistar/services/rest/bookingmanagement/v1/booking`.

- (POST) `/mythaistar/services/rest/ordermanagement/v1/order`.

- (POST) `/mythaistar/services/rest/bookingmanagement/v1/booking/search`.

- (POST) `/mythaistar/services/rest/ordermanagement/v1/order/search`.

- (POST) `/mythaistar/services/rest/ordermanagement/v1/order/filter` (to filter with fields that does not belong to the Order entity).

- (POST) `/mythaistar/login`.

- (GET) `/mythaistar/services/rest/security/v1/currentuser/`.


You can find all the details for the services implementation in the https://github.com/devonfw/my-thai-star/blob/develop/swagger/mythaistar.yaml[Swagger definition] included in the My Thai Star project on Github.

To treat these services separately, the following routers were created:

- bookingmanagement: will answer all requests with the prefix `/mythaistar/services/rest/bookingmanagement/v1`
- dishmanagement: will answer all requests with the prefix `/mythaistar/services/rest/dishmanagement/v1`
- ordermanagement: will answer all requests with the prefix `/mythaistar/services/rest/ordermanagement/v1`

These routers will define the behavior for each service and use the logical layer.

An example of service definition:

[source, javascript]
----
router.post('/booking/search', (req: types.CustomRequest, res: Response) => {
    try {
        // body content must be SearchCriteria
        if (!types.isSearchCriteria(req.body)) {
            throw {code: 400, message: 'No booking token given' };
        }

        // use the searchBooking method defined at business logic
        business.searchBooking(req.body, (err: types.Error | null, bookingEntity: types.PaginatedList) => {
            if (err) {
                res.status(err.code || 500).json(err.message);
            } else {
                res.json(bookingEntity);
            }
        });
    } catch (err) {
        res.status(err.code || 500).json({ message: err.message });
    }
});
----

=== Logic layer and Data access layer

In the _logic_ layer we will locate all the _business logic_ of the application. It will be located in the file logic.ts. If in this layer we need to get access to the data, we make use of data access layer directly, in this case using OASP4fn with the DynamoDB adapter.

Example:

[source, javascript]
----
export async function cancelOrder(orderId: string, callback: (err: types.Error | null) => void) {
    let order: dbtypes.Order;

    try {
        // Data access
        order = await oasp4fn.table('Order', orderId).promise() as dbtypes.Order;

        [...]
}
----

We could define the data access layer separately, but oasp4fn allows us to do this in a simple and clear way. So, we decided  to not separate the access layer to the logic business.

== Security with Json Web Token

For the _Authentication_ and _Authorization_ the app will implement the https://jwt.io/[json web token] protocol.

=== Jwt basics

Refer to link:java-design.asciidoc#jwt-basics[Jwt basiscs] for more information.

=== Jwt implementation details

The _Json Web Token_ pattern will be implemented based on the https://github.com/auth0/node-jsonwebtoken[_JSON web token_] library available on npm.

==== Authentication

Based on the _JSON web token_ approach, we will implement a class _Authentication_ to define the security _entry point_ and filters. Also, as _My Thai Star_ is a mainly _public_ application, we will define here the resources that won't be secured.

List of _unsecured resources_:

- _/services/rest/dishmanagement/**_: to allow anonymous users to see the dishes info in the _menu_ section.
- _/services/rest/ordermanagement/v1/order_: to allow anonymous users to save an order. They will need a _booking token_ but they won't be authenticated to do this task.
- _/services/rest/bookingmanagement/v1/booking_: to allow anonymous users to create a booking. Only a _booking token_ is necessary to accomplish this task.
- _/services/rest/bookingmanagement/v1/booking/cancel/**_: to allow cancelling a booking from an email. Only the _booking token_ is needed.
- _/services/rest/bookingmanagement/v1/invitedguest/accept/**_: to allow guests to accept an invite. Only a _guest token_ is needed.
- _/services/rest/bookingmanagement/v1/invitedguest/decline/**_: to allow guests to reject an invite. Only a _guest token_ is needed.

To configure the _login_ we will create an instance of _Authentication_ in the app file and then we will use the method _auth_ for handle the requests to the /login endpoint.

[source, javascript]
----
app.post('/mythaistar/login', auth.auth);
----

To verify the presence of the _Authorization token_ in the headers, we will register in the express the _Authentication.registerAuthentication_ middleware. This middleware will check if the token is correct, if so, it will place the user in the request and continue to process it. If the token is not correct it will continue processing the request normally.

[source, javascript]
----
app.use(auth.registerAuthentication);
----

Finally, we have two default users created in the database:

- user: _waiter_
- password: _waiter_
- role: _WAITER_

- user: _user0_
- password: _password_
- role: _CUSTOMER_

==== Token set up

Following the https://jwt.io/introduction/[official documentation] the implementation details for the MyThaiStar's jwt will be:

* _Secret_: Used as part of the signature of the token, acting as a private key. It can be modified at config.ts file.

* _Token Prefix_ schema: Bearer. The token will look like `Bearer <token>` 

* _Header_: Authorization. The response header where the token will be included. Also, in the requests, when checking the token it will be expected to be in the same header.

* The _Authorization_ header should be part of the `Access-Control-Expose-Headers` header to allow clients access to the _Authorization_ header content (the token);

* Signature Algorithm: To encrypt the token we will use the default algorithm HS512.

==== Current User request

To provide to the client with the current user data our application should expose a service to return the user details. In this case the _Authentication_ has a method called _getCurrentUser_ which will return the user data. We only need register it at express.

[source, javascript]
----
app.get('/mythaistar/services/rest/security/v1/currentuser', auth.getCurrentUser);
----

==== Authorization

We need to secure three services, that only should be accessible for users with role _Waiter_:

- (POST) `/mythaistar/services/rest/bookingmanagement/v1/booking/search`.

- (POST) `/mythaistar/services/rest/ordermanagement/v1/order/search`.

- (POST) `/mythaistar/services/rest/ordermanagement/v1/order/filter`.

To ensure this, the _Authorization_ class has the _securizedEndpoint_ method that guarantees access based on the role. This method can be used as middleware in secure services. As the role is included in the token, once validated we will have this information in the request and the middleware can guarantee access or return a 403 error.

[source, javascript]
----
app.use('/mythaistar/services/rest/ordermanagement/v1/order/filter', auth.securizedEndpoint('WAITER'));
app.use('/mythaistar/services/rest/ordermanagement/v1/order/search', auth.securizedEndpoint('WAITER'));
app.use('/mythaistar/services/rest/bookingmanagement/v1/booking/search', auth.securizedEndpoint('WAITER'));
----
